{"/home/travis/build/npmtest/node-npmtest-generator-ionic/test.js":"/* istanbul instrument in package npmtest_generator_ionic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/lib.npmtest_generator_ionic.js":"/* istanbul instrument in package npmtest_generator_ionic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_ionic = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_ionic = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-ionic && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_ionic */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_ionic\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_ionic.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_ionic.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_ionic.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_ionic.__dirname + '/lib.npmtest_generator_ionic.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/app/index.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar generators = require('yeoman-generator');\nvar _ = require('lodash');\nvar mout = require('mout');\nvar cordova = require('cordova');\nvar chalk = require('chalk');\nvar ionicUtils = require('../utils');\n\nvar appPath = path.join(process.cwd(), 'app');\n\nmodule.exports = generators.Base.extend({\n  constructor: function () {\n    generators.Base.apply(this, arguments);\n    console.log(ionicUtils.greeting);\n\n    this.argument('appName', { type: String, required: false });\n    this.option('appName', { type: String, required: false });\n    this.option('appId', { type: String, required: false });\n    this.option('compass', { type: Boolean, required: false });\n    this.option('starter', { type: String, required: false });\n    this.option('templates', { type: Array, required: false });\n    this.option('plugins', { type: Object, required: false });\n    this.options.selected = {};\n  },\n\n  prompting: {\n    askForCompass: function askForCompass() {\n      var done = this.async();\n\n      this.prompt([{\n        type: 'confirm',\n        name: 'compass',\n        message: 'Would you like to use Sass with Compass (requires Ruby)?',\n        default: (typeof(this.options.compass) !== 'undefined') ? this.options.compass : false\n      }], function (props) {\n        this.compass = this.options.selected.compass = props.compass;\n\n        done();\n      }.bind(this));\n    },\n\n    askForPlugins: function askForPlugins() {\n      var done = this.async();\n\n      if (this.options.plugins) {\n        ionicUtils.mergePlugins(this.options.plugins);\n      }\n\n      this.prompt(ionicUtils.plugins.prompts, function (props) {\n        this.plugins = this.options.selected.plugins = props.plugins;\n\n        done();\n      }.bind(this));\n    },\n\n    askForStarter: function askForStarter() {\n      var done = this.async();\n\n      if (this.options.templates) {\n        ionicUtils.mergeStarterTemplates(this.options.templates);\n      }\n\n      var defaultIndex = 0;\n      if (this.options.starter) {\n        defaultIndex = _.findIndex(ionicUtils.starters.templates, { name: this.options.starter });\n\n        if (defaultIndex === -1) {\n          defaultIndex = 0;\n          this.log(chalk.bgYellow(chalk.black('WARN')) +\n            chalk.magenta(' Unable to locate the requested default template: ') +\n            this.options.starter);\n        }\n      }\n\n      this.prompt([{\n        type: 'list',\n        name: 'starter',\n        message: 'Which starter template would you like to use?',\n        choices: _.pluck(ionicUtils.starters.templates, 'name'),\n        default: defaultIndex\n      }], function (props) {\n        this.starter = this.options.selected.starter = _.find(ionicUtils.starters.templates, { name: props.starter });\n        done();\n      }.bind(this));\n    }\n\n  },\n\n  configuring: {\n    commonVariables: function() {\n      this.appName = this.appName || this.options.appName || path.basename(process.cwd());\n      this.appName = mout.string.pascalCase(this.appName);\n      this.appId = this.options.appId || 'com.example.' + this.appName;\n      this.appPath = 'app';\n      this.root = process.cwd();\n\n      this.pkg = JSON.parse(this.readFileAsString(path.join(__dirname, '../package.json')));\n    },\n\n    setupEnv: function setupEnv() {\n        // Removes thumbnail cache files\n        var invisibleFiles = ['Thumbs.db', '.DS_Store'];\n        invisibleFiles.forEach(function(filename) {\n            var file = path.join(process.cwd(), filename)\n            if(fs.existsSync(file) ) {\n                fs.unlinkSync(file);\n            }\n       });\n      // Copies the contents of the generator example app\n      // directory into your users new application path\n      this.sourceRoot(path.join(__dirname, '../templates/'));\n      this.directory('common/root', '.', true);\n    },\n\n    packageFiles: function packageFiles() {\n      this.template('common/_bower.json', 'bower.json');\n      this.template('common/_bowerrc', '.bowerrc');\n      this.template('common/_package.json', 'package.json');\n      this.copy('common/_Gruntfile.js', 'Gruntfile.js');\n      this.template('common/_gitignore', '.gitignore');\n    }\n  },\n\n  writing: {\n    cordovaInit: function cordovaInit() {\n      var done = this.async();\n      cordova.create('.', this.appId, this.appName, function (error) {\n        if (error) {\n          console.log(chalk.yellow(error.message + ': Skipping `cordova create`'));\n        } else {\n          console.log(chalk.yellow('Created a new Cordova project with name \"' + this.appName + '\" and id \"' + this.appId + '\"'));\n        }\n        done();\n      }.bind(this));\n    },\n\n    installPlugins: function installPlugins() {\n      console.log(chalk.yellow('\\nInstall plugins registered at plugins.cordova.io: ') + chalk.green('grunt plugin:add:org.apache.cordova.globalization'));\n      console.log(chalk.yellow('Or install plugins direct from source: ') + chalk.green('grunt plugin:add:https://github.com/apache/cordova-plugin-console.git\\n'));\n      if (this.plugins.length > 0) {\n        console.log(chalk.yellow('Installing selected Cordova plugins, please wait.'));\n        \n        // Turns out plugin() doesn't accept a callback so we try/catch instead\n        try {\n          cordova.plugin('add', this.plugins);\n        } catch (e) {\n          console.log(e);\n          this.log.error(chalk.red('Please run `yo ionic` in an empty directory, or in that of an already existing cordova project.'));\n          process.exit(1);\n        }\n      }\n    },\n\n    installStarter: function installStarter() {\n      console.log(chalk.yellow('Installing starter template. Please wait'));\n      var done = this.async();\n\n      var callback = function (error, remote) {\n        if (error) {\n          done(error);\n        }\n\n        // Template remote initialization: Copy from remote root folder (.) to working directory (/app)\n        remote.directory('.', 'app');\n \n        this.starterCache = remote.cachePath;\n        done();\n      }.bind(this);\n\n      if (this.starter && this.starter.path) {\n        this.log(chalk.bgYellow(chalk.black('WARN')) +\n          chalk.magenta(' Getting the template from a local path.  This should only be used for developing new templates.'));\n        this.remoteDir(this.starter.path, callback);\n      } else if (this.starter.url) {\n        this.remote(this.starter.url, callback, true);\n      } else {\n        this.remote(this.starter.user, this.starter.repo, 'master', callback, true);\n      }\n    },\n\n    readIndex: function readIndex() {\n      this.indexFile = this.engine(this.read(path.join(this.starterCache, 'index.html')), this);\n    },\n\n    appJs: function appJs() {\n     \n      var scriptPrefix = 'js' + path.sep;\n\n      var scripts = [scriptPrefix + 'configuration.js'];\n      \n      this.fs.store.each(function (file, index) {\n        if (file.path.indexOf('.js') !== -1)\n        {\n          var relPath = path.relative(appPath, file.path);\n          if (relPath.indexOf(scriptPrefix) === 0) {\n            scripts.push(relPath);\n          }\n        }\n      });\n\n      //this.indexFile = this.appendScripts(this.indexFile, 'scripts/scripts.js', scripts);\n    },\n\n    createIndexHtml: function createIndexHtml() {\n             \n        // Regex: Vendor CSS\n        this.indexFile = this.indexFile.replace(/<link href=\"lib\\/ionic\\/css\\/ionic.css\" rel=\"stylesheet\">/g, \"<!-- build:css styles\\/vendor.css -->\\n    <!-- bower:css -->\\n    <!-- endbower -->\\n    <!-- endbuild -->\");\n        \n        // Regex: User CSS\n        //this.indexFile = this.indexFile.replace(/<link href=\"css\\/style.css\" rel=\"stylesheet\">/g, \"<!-- build:css styles\\/vendor.css -->\\n    <!-- bower:css -->\\n    <!-- endbower -->\\n    <!-- endbuild -->\");\n        \n        // Regex: Vendor scripts (vendor.js)\n        this.indexFile = this.indexFile.replace(/<script src=\"lib\\/ionic\\/js\\/ionic.bundle.js\"><\\/script>/g, \"<!-- build:js scripts\\/vendor.js -->\\n    <!-- bower:js -->\\n    <!-- endbower -->\\n    <!-- endbuild -->\");\n      \n       // Regex: User scripts (scripts.js)\n       this.indexFile = this.indexFile.replace(/<!-- your app's js -->/g,\"<!-- your app's js -->\\n    <!-- build:js scripts\\/scripts.js -->\");\n       this.indexFile = this.indexFile.replace(/<\\/head>/g,\"  <script src=\\\"scripts\\/configuration.js\\\"><\\/script>\\n    <!-- endbuild -->\\n  <\\/head>\");\n       \n       // Regex/Rename: Scripts path (Ionics 'js' to 'scripts')\n       this.indexFile = this.indexFile.replace(/href=\"css/g,\"href=\\\"styles\");\n       \n       // Regex/Rename: CSS path (Ionics 'css' to 'styles')\n       this.indexFile = this.indexFile.replace(/src=\"js/g,\"src=\\\"scripts\");\n     \n       // Write index.html\n       this.indexFile = this.indexFile.replace(/&apos;/g, \"'\");\n       this.write(path.join(this.appPath, 'index.html'), this.indexFile);\n    },\n\n    ensureStyles: function ensureStyles() {\n      // Only create a main style file if the starter template didn't\n      // have any styles. In the case it does, the starter should\n      // supply both main.css and main.scss files, one of which\n      // will be deleted\n      \n      var cssFile = 'main.' + (this.compass ? 'scss' : 'css');\n      var unusedFile = 'main.' + (this.compass ? 'css' : 'scss');\n      var stylePath = path.join(process.cwd(), 'app', 'css');\n      var found = false;\n\n      this.fs.store.each(function (file, index) {\n        if (path.dirname(file.path) === stylePath) {\n          var name = path.basename(file.path);\n\n          if (name === cssFile) {\n            found = true;\n          } else if (name === unusedFile) {\n            // BUG: The log will still report the the file was created\n            this.fs.delete(file.path);\n          }\n        }\n      }.bind(this));\n\n      if (!found) {\n        this.copy('styles/' + cssFile, 'app/css/' + cssFile);\n      }\n\n    },\n\n    cordovaHooks: function cordovaHooks() {\n      this.directory('hooks', 'hooks', true);\n    },\n\n    packages: function () {\n      this.installDependencies({ skipInstall: this.options['skip-install'] });\n    }\n  },\n\n  end: {\n    hookPerms: function hookPerms() {\n      var iconsAndSplash = 'hooks/after_prepare/icons_and_splashscreens.js';\n      fs.chmodSync(iconsAndSplash, '755');\n    },\n    folderNames: function folderNames() {\n      // Rename: CSS path (Ionics 'css' to 'styles')\n      fs.rename(path.join(appPath, 'css'), path.join(appPath, 'styles'), function(err) {\n          if ( err ) console.log('ERROR: ' + err);\n      });\n      \n      // Rename: Scripts path (Ionics 'js' to 'scripts')\n      fs.rename(path.join(appPath, 'js'), path.join(appPath, 'scripts'), function(err) {\n          if ( err ) console.log('ERROR: ' + err);\n      });\n      \n      // Rename: Images path (Ionics 'img' to 'images')\n      fs.rename(path.join(appPath, 'img'), path.join(appPath, 'images'), function(err) {\n          if ( err ) console.log('ERROR: ' + err);\n      });\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/utils/index.js":"'use strict';\nvar _ = require('lodash');\n\nmodule.exports = {\n  greeting: require('./greeting'),\n  plugins: require('./plugins'),\n  starters: require('./starters')\n};\n\nfunction mergeCollections(arr1, arr2, prop) {\n\t_.forEach(arr2, function (item2) {\n\t\tvar item1 = _.find(arr1, function (lookAt1) {\n\t\t\treturn lookAt1[prop] === item2[prop];\n\t\t});\n\n\t\tif (item1) {\n\t\t\t_.extend(item1, item2);\n\t\t} else {\n\t\t\tarr1.push(item2);\n\t\t}\n\t});\n}\n\nmodule.exports.mergePlugins = function (plugins) {\n\tif (_.isObject(plugins)) {\n\t\tplugins = _.map(plugins, function (value, key) {\n\t\t\treturn {\n\t\t\t\tname: key,\n\t\t\t\tvalue: key,\n\t\t\t\tchecked: value\n\t\t\t};\n\t\t});\n\t}\n\n\tmergeCollections(module.exports.plugins.prompts[0].choices, plugins, 'value');\n};\n\nmodule.exports.mergeStarterTemplates = function (templates) {\n\tmergeCollections(module.exports.starters.templates, templates, 'name');\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/utils/greeting.js":"var chalk = require('chalk');\n\nmodule.exports = chalk.cyan(\n\"    _             _\" +\n\"\\n   (_)           (_)\" +   \n\"\\n    _  ___  _ __  _  ___\" +\n\"\\n   | |/ _ \\\\| '_ \\\\| |/ __|\" +\n\"\\n   | | (_) | | | | | (__\" + \n\"\\n   |_|\\\\___/|_| |_|_|\\\\___|\\n\");\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/utils/plugins.js":"module.exports = {\n  prompts: [{\n    type: 'checkbox',\n    name: 'plugins',\n    message: 'Which Cordova plugins would you like to include?',\n    choices: [{\n      value: 'org.apache.cordova.device',\n      name: 'org.apache.cordova.device',\n      checked: true\n    }, {\n      value: 'org.apache.cordova.console',\n      name: 'org.apache.cordova.console',\n      checked: true\n    }, {\n      value: 'com.ionic.keyboard',\n      name: 'com.ionic.keyboard',\n      checked: true\n    }, {\n      value: 'org.apache.cordova.splashscreen',\n      name: 'org.apache.cordova.splashscreen',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.statusbar',\n      name: 'org.apache.cordova.statusbar',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.battery-status',\n      name: 'org.apache.cordova.battery-status',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.network-information',\n      name: 'org.apache.cordova.network-information',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.device-motion',\n      name: 'org.apache.cordova.device-motion',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.device-orientation',\n      name: 'org.apache.cordova.device-orientation',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.geolocation',\n      name: 'org.apache.cordova.geolocation',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.camera',\n      name: 'org.apache.cordova.camera',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.media-capture',\n      name: 'org.apache.cordova.media-capture',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.media',\n      name: 'org.apache.cordova.media',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.file',\n      name: 'org.apache.cordova.file',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.file-transfer',\n      name: 'org.apache.cordova.file-transfer',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.dialogs',\n      name: 'org.apache.cordova.dialogs',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.vibration',\n      name: 'org.apache.cordova.vibration',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.contacts',\n      name: 'org.apache.cordova.contacts',\n      checked: false\n    }, {\n      value: 'org.apache.cordova.inappbrowser',\n      name: 'org.apache.cordova.inappbrowser',\n      checked: false\n    }]\n  }]\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/utils/starters.js":"module.exports = {\n  templates: [\n    {\n      name: 'Tabs',\n      user: 'driftyco',\n      repo: 'ionic-starter-tabs'\n    },\n    {\n      name: 'Sidemenu',\n      user: 'driftyco',\n      repo: 'ionic-starter-sidemenu'\n    },\n    {\n      name: 'Blank',\n      user: 'driftyco',\n      repo: 'ionic-starter-blank'\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/Gruntfile.js":"'use strict';\nvar semver = require('semver');\n\nmodule.exports = function (grunt) {\n  require('load-grunt-tasks')(grunt);\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    changelog: {\n      options: {\n        dest: 'CHANGELOG.md',\n        versionFile: 'package.json'\n      }\n    },\n    release: {\n      options: {\n        commitMessage: '<%= version %>',\n        tagName: 'v<%= version %>',\n        bump: false, // we have our own bump\n        file: 'package.json'\n      }\n    },\n    stage: {\n      options: {\n        files: ['CHANGELOG.md']\n      }\n    }\n  });\n\n  grunt.registerTask('bump', 'bump manifest version', function (type) {\n    var options = this.options({\n      file: grunt.config('pkgFile') || 'package.json'\n    });\n\n    function setup(file, type) {\n      var pkg = grunt.file.readJSON(file);\n      var newVersion = pkg.version = semver.inc(pkg.version, type || 'patch');\n      return {\n        file: file,\n        pkg: pkg,\n        newVersion: newVersion\n      };\n    }\n\n    var config = setup(options.file, type);\n    grunt.file.write(config.file, JSON.stringify(config.pkg, null, '  ') + '\\n');\n    grunt.log.ok('Version bumped to ' + config.newVersion);\n  });\n\n  grunt.registerTask('stage', 'git add files before running the release task', function () {\n    var files = this.options().files;\n    grunt.util.spawn({\n      cmd: process.platform === 'win32' ? 'git.cmd' : 'git',\n      args: ['add'].concat(files)\n    }, grunt.task.current.async());\n  });\n\n  grunt.registerTask('default', ['bump', 'changelog', 'stage', 'release']);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ionic/node_modules/generator-ionic/templates/common/_Gruntfile.js":"// Generated on <%= (new Date).toISOString().split('T')[0] %> using <%= pkg.name %> <%= pkg.version %>\n'use strict';\n\nvar _ = require('lodash');\nvar path = require('path');\nvar cordovaCli = require('cordova');\nvar spawn = process.platform === 'win32' ? require('win-spawn') : require('child_process').spawn;\n\nmodule.exports = function (grunt) {\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n\n    // Project settings\n    yeoman: {\n      // configurable paths\n      app: 'app',\n      scripts: 'scripts',\n      styles: 'styles',\n      images: 'images',\n      test: 'test',\n      dist: 'www'\n    },\n\n    // Environment Variables for Angular App\n    // This creates an Angular Module that can be injected via ENV\n    // Add any desired constants to the ENV objects below.\n    // https://github.com/diegonetto/generator-ionic/blob/master/docs/FAQ.md#how-do-i-add-constants\n    ngconstant: {\n      options: {\n        space: '  ',\n        wrap: '\"use strict\";\\n\\n {%= __ngModule %}',\n        name: 'config',\n        dest: '<%%= yeoman.app %>/<%%= yeoman.scripts %>/configuration.js'\n      },\n      development: {\n        constants: {\n          ENV: {\n            name: 'development',\n            apiEndpoint: 'http://dev.yoursite.com:10000/'\n          }\n        }\n      },\n      production: {\n        constants: {\n          ENV: {\n            name: 'production',\n            apiEndpoint: 'http://api.yoursite.com/'\n          }\n        }\n      }\n    },\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      bower: {\n        files: ['bower.json'],\n        tasks: ['wiredep', 'newer:copy:app']\n      },\n      html: {\n        files: ['<%%= yeoman.app %>/**/*.html'],\n        tasks: ['newer:copy:app']\n      },\n      js: {\n        files: ['<%%= yeoman.app %>/<%%= yeoman.scripts %>/**/*.js'],\n        tasks: ['newer:copy:app', 'newer:jshint:all']\n      },<% if (compass) { %>\n      compass: {\n        files: ['<%%= yeoman.app %>/<%%= yeoman.styles %>/**/*.{scss,sass}'],\n        tasks: ['compass:server', 'autoprefixer', 'newer:copy:tmp']\n      },<% } else { %>\n      styles: {\n        files: ['<%%= yeoman.app %>/<%%= yeoman.styles %>/**/*.css'],\n        tasks: ['newer:copy:styles', 'autoprefixer', 'newer:copy:tmp']\n      },<% } %>\n      gruntfile: {\n        files: ['Gruntfile.js'],\n        tasks: ['ngconstant:development', 'newer:copy:app']\n      }\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: 'localhost'\n      },\n      dist: {\n        options: {\n          base: '<%%= yeoman.dist %>'\n        }\n      },\n      coverage: {\n        options: {\n          port: 9002,\n          open: true,\n          base: ['coverage']\n        }\n      }\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish')\n      },\n      all: [\n        'Gruntfile.js',\n        '<%%= yeoman.app %>/<%%= yeoman.scripts %>/**/*.js'\n      ],\n      test: {\n        options: {\n          jshintrc: 'test/.jshintrc'\n        },\n        src: ['test/unit/**/*.js']\n      }\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.temp',\n            '<%%= yeoman.dist %>/*',\n            '!<%%= yeoman.dist %>/.git*'\n          ]\n        }]\n      },\n      server: '.temp'\n    },\n\n    autoprefixer: {\n      options: {\n        browsers: ['last 1 version']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.temp/<%%= yeoman.styles %>/',\n          src: '{,*/}*.css',\n          dest: '.temp/<%%= yeoman.styles %>/'\n        }]\n      }\n    },\n\n    // Automatically inject Bower components into the app\n    wiredep: {\n      app: {\n        src: ['<%%= yeoman.app %>/index.html'],\n        ignorePath:  /\\.\\.\\//\n      }<% if (compass) { %>,\n      sass: {\n        src: ['<%%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        ignorePath: /(\\.\\.\\/){1,2}bower_components\\//\n      }<% } %>\n    },\n\n    <% if (compass) { %>\n    // Compiles Sass to CSS and generates necessary files if requested\n    compass: {\n      options: {\n        sassDir: '<%%= yeoman.app %>/<%%= yeoman.styles %>',\n        cssDir: '.temp/<%%= yeoman.styles %>',\n        generatedImagesDir: '.temp/<%%= yeoman.images %>/generated',\n        imagesDir: '<%%= yeoman.app %>/<%%= yeoman.images %>',\n        javascriptsDir: '<%%= yeoman.app %>/<%%= yeoman.scripts %>',\n        fontsDir: '<%%= yeoman.app %>/<%%= yeoman.styles %>/fonts',\n        importPath: '<%%= yeoman.app %>/bower_components',\n        httpImagesPath: '/<%%= yeoman.images %>',\n        httpGeneratedImagesPath: '/<%%= yeoman.images %>/generated',\n        httpFontsPath: '/<%%= yeoman.styles %>/fonts',\n        relativeAssets: false,\n        assetCacheBuster: false,\n        raw: 'Sass::Script::Number.precision = 10\\n'\n      },\n      dist: {\n        options: {\n          generatedImagesDir: '<%%= yeoman.dist %>/<%%= yeoman.images %>/generated'\n        }\n      },\n      server: {\n        options: {\n          debugInfo: true\n        }\n      }\n    },\n    <% } %>\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      html: '<%%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%%= yeoman.dist %>',\n        staging: '.temp',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat', 'uglifyjs'],\n              css: ['cssmin']\n            },\n            post: {}\n          }\n        }\n      }\n    },\n\n    // Performs rewrites based on the useminPrepare configuration\n    usemin: {\n      html: ['<%%= yeoman.dist %>/**/*.html'],\n      css: ['<%%= yeoman.dist %>/<%%= yeoman.styles %>/**/*.css'],\n      options: {\n        assetsDirs: ['<%%= yeoman.dist %>']\n      }\n    },\n\n    // The following *-min tasks produce minified files in the dist folder\n    cssmin: {\n      options: {\n        //root: '<%%= yeoman.app %>',\n        noRebase: true\n      }\n    },\n    htmlmin: {\n      dist: {\n        options: {\n          collapseWhitespace: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.dist %>',\n          src: ['*.html', 'templates/**/*.html'],\n          dest: '<%%= yeoman.dist %>'\n        }]\n      }\n    },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%%= yeoman.app %>',\n          dest: '<%%= yeoman.dist %>',\n          src: [\n            '<%%= yeoman.images %>/**/*.{png,jpg,jpeg,gif,webp,svg}',\n            '*.html',\n            'templates/**/*.html',\n            'fonts/*'\n          ]\n        }, {\n          expand: true,\n          cwd: '.temp/<%%= yeoman.images %>',\n          dest: '<%%= yeoman.dist %>/<%%= yeoman.images %>',\n          src: ['generated/*']\n        }]\n      },\n      styles: {\n        expand: true,\n        cwd: '<%%= yeoman.app %>/<%%= yeoman.styles %>',\n        dest: '.temp/<%%= yeoman.styles %>/',\n        src: '{,*/}*.css'\n      },\n      fonts: {\n        expand: true,\n        cwd: 'app/bower_components/ionic/release/fonts/',\n        dest: '<%%= yeoman.app %>/fonts/',\n        src: '*'\n      },\n      vendor: {\n        expand: true,\n        cwd: '<%%= yeoman.app %>/vendor',\n        dest: '.temp/<%%= yeoman.styles %>/',\n        src: '{,*/}*.css'\n      },\n      app: {\n        expand: true,\n        cwd: '<%%= yeoman.app %>',\n        dest: '<%%= yeoman.dist %>/',\n        src: [\n          '**/*',\n          '!**/*.(scss,sass,css)',\n        ]\n      },\n      tmp: {\n        expand: true,\n        cwd: '.temp',\n        dest: '<%%= yeoman.dist %>/',\n        src: '**/*'\n      }\n    },\n\n    concurrent: {\n      ionic: {\n        tasks: [],\n        options: {\n          logConcurrentOutput: true\n        }\n      },\n      server: [<% if (compass) { %>\n        'compass:server',<% } %>\n        'copy:styles',\n        'copy:vendor',\n        'copy:fonts'\n      ],\n      test: [<% if (compass) { %>\n        'compass',<% } %>\n        'copy:styles',\n        'copy:vendor',\n        'copy:fonts'\n      ],\n      dist: [<% if (compass) { %>\n        'compass:dist',<% } %>\n        'copy:styles',\n        'copy:vendor',\n        'copy:fonts'\n      ]\n    },\n\n    // By default, your `index.html`'s <!-- Usemin block --> will take care of\n    // minification. These next options are pre-configured if you do not wish\n    // to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%%= yeoman.dist %>/<%%= yeoman.styles %>/main.css': [\n    //         '.temp/<%%= yeoman.styles %>/**/*.css',\n    //         '<%%= yeoman.app %>/<%%= yeoman.styles %>/**/*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%%= yeoman.dist %>/<%%= yeoman.scripts %>/scripts.js': [\n    //         '<%%= yeoman.dist %>/<%%= yeoman.scripts %>/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    // Test settings\n    // These will override any config options in karma.conf.js if you create it.\n    karma: {\n      options: {\n        basePath: '',\n        frameworks: ['mocha', 'chai'],\n        files: [\n          '<%%= yeoman.app %>/bower_components/angular/angular.js',\n          '<%%= yeoman.app %>/bower_components/angular-mocks/angular-mocks.js',\n          '<%%= yeoman.app %>/bower_components/angular-animate/angular-animate.js',\n          '<%%= yeoman.app %>/bower_components/angular-sanitize/angular-sanitize.js',\n          '<%%= yeoman.app %>/bower_components/angular-ui-router/release/angular-ui-router.js',\n          '<%%= yeoman.app %>/bower_components/ionic/release/js/ionic.js',\n          '<%%= yeoman.app %>/bower_components/ionic/release/js/ionic-angular.js',\n          '<%%= yeoman.app %>/<%%= yeoman.scripts %>/**/*.js',\n          '<%%= yeoman.test %>/mock/**/*.js',\n          '<%%= yeoman.test %>/spec/**/*.js'\n        ],\n        autoWatch: false,\n        reporters: ['dots', 'coverage'],\n        port: 8080,\n        singleRun: false,\n        preprocessors: {\n          // Update this if you change the yeoman config path\n          '<%%= yeoman.app %>/<%%= yeoman.scripts %>/**/*.js': ['coverage']\n        },\n        coverageReporter: {\n          reporters: [\n            { type: 'html', dir: 'coverage/' },\n            { type: 'text-summary' }\n          ]\n        }\n      },\n      unit: {\n        // Change this to 'Chrome', 'Firefox', etc. Note that you will need\n        // to install a karma launcher plugin for browsers other than Chrome.\n        browsers: ['PhantomJS'],\n        background: true\n      },\n      continuous: {\n        browsers: ['PhantomJS'],\n        singleRun: true\n      }\n    },\n\n    // ngAnnotate tries to make the code safe for minification automatically by\n    // using the Angular long form for dependency injection.\n    ngAnnotate: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.temp/concat/<%%= yeoman.scripts %>',\n          src: '*.js',\n          dest: '.temp/concat/<%%= yeoman.scripts %>'\n        }]\n      }\n    }\n\n  });\n\n  // Register tasks for all Cordova commands\n  _.functions(cordovaCli).forEach(function (name) {\n    grunt.registerTask(name, function () {\n      this.args.unshift(name.replace('cordova:', ''));\n      // Handle URL's being split up by Grunt because of `:` characters\n      if (_.contains(this.args, 'http') || _.contains(this.args, 'https')) {\n        this.args = this.args.slice(0, -2).concat(_.last(this.args, 2).join(':'));\n      }\n      var done = this.async();\n      var exec = process.platform === 'win32' ? 'cordova.cmd' : 'cordova';\n      var cmd = path.resolve('./node_modules/cordova/bin', exec);\n      var flags = process.argv.splice(3);\n      var child = spawn(cmd, this.args.concat(flags));\n      child.stdout.on('data', function (data) {\n        grunt.log.writeln(data);\n      });\n      child.stderr.on('data', function (data) {\n        grunt.log.error(data);\n      });\n      child.on('close', function (code) {\n        code = code ? false : true;\n        done(code);\n      });\n    });\n  });\n\n  // Since Apache Ripple serves assets directly out of their respective platform\n  // directories, we watch all registered files and then copy all un-built assets\n  // over to <%%= yeoman.dist %>/. Last step is running cordova prepare so we can refresh the ripple\n  // browser tab to see the changes. Technically ripple runs `cordova prepare` on browser\n  // refreshes, but at this time you would need to re-run the emulator to see changes.\n  grunt.registerTask('ripple', ['wiredep', 'newer:copy:app', 'ripple-emulator']);\n  grunt.registerTask('ripple-emulator', function () {\n    grunt.config.set('watch', {\n      all: {\n        files: _.flatten(_.pluck(grunt.config.get('watch'), 'files')),\n        tasks: ['newer:copy:app', 'prepare']\n      }\n    });\n\n    var cmd = path.resolve('./node_modules/ripple-emulator/bin', 'ripple');\n    var child = spawn(cmd, ['emulate']);\n    child.stdout.on('data', function (data) {\n      grunt.log.writeln(data);\n    });\n    child.stderr.on('data', function (data) {\n      grunt.log.error(data);\n    });\n    process.on('exit', function (code) {\n      child.kill('SIGINT');\n      process.exit(code);\n    });\n\n    return grunt.task.run(['watch']);\n  });\n\n  // Dynamically configure `karma` target of `watch` task so that\n  // we don't have to run the karma test server as part of `grunt serve`\n  grunt.registerTask('watch:karma', function () {\n    var karma = {\n      files: ['<%%= yeoman.app %>/<%%= yeoman.scripts %>/**/*.js', '<%%= yeoman.test %>/spec/**/*.js'],\n      tasks: ['newer:jshint:test', 'karma:unit:run']\n    };\n    grunt.config.set('watch', karma);\n    return grunt.task.run(['watch']);\n  });\n\n  // Wrap ionic-cli commands\n  grunt.registerTask('ionic', function() {\n    var done = this.async();\n    var script = path.resolve('./node_modules/ionic/bin/', 'ionic');\n    var flags = process.argv.splice(3);\n    var child = spawn(script, this.args.concat(flags), { stdio: 'inherit' });\n    child.on('close', function (code) {\n      code = code ? false : true;\n      done(code);\n    });\n  });\n\n  grunt.registerTask('test', [\n    'wiredep',\n    'clean',\n    'concurrent:test',\n    'autoprefixer',\n    'karma:unit:start',\n    'watch:karma'\n  ]);\n\n  grunt.registerTask('serve', function (target) {\n    if (target === 'compress') {\n      return grunt.task.run(['compress', 'ionic:serve']);\n    }\n\n    grunt.config('concurrent.ionic.tasks', ['ionic:serve', 'watch']);\n    grunt.task.run(['wiredep', 'init', 'concurrent:ionic']);\n  });\n  grunt.registerTask('emulate', function() {\n    grunt.config('concurrent.ionic.tasks', ['ionic:emulate:' + this.args.join(), 'watch']);\n    return grunt.task.run(['init', 'concurrent:ionic']);\n  });\n  grunt.registerTask('run', function() {\n    grunt.config('concurrent.ionic.tasks', ['ionic:run:' + this.args.join(), 'watch']);\n    return grunt.task.run(['init', 'concurrent:ionic']);\n  });\n  grunt.registerTask('build', function() {\n    return grunt.task.run(['init', 'ionic:build:' + this.args.join()]);\n  });\n\n  grunt.registerTask('init', [\n    'clean',\n    'ngconstant:development',\n    'wiredep',\n    'concurrent:server',\n    'autoprefixer',\n    'newer:copy:app',\n    'newer:copy:tmp'\n  ]);\n\n\n  grunt.registerTask('compress', [\n    'clean',\n    'ngconstant:production',\n    'wiredep',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'ngAnnotate',\n    'copy:dist',\n    'cssmin',\n    'uglify',\n    'usemin',\n    'htmlmin'\n  ]);\n\n  grunt.registerTask('coverage', \n    ['karma:continuous',\n    'connect:coverage:keepalive'\n  ]);\n\n  grunt.registerTask('default', [\n    'wiredep',\n    'newer:jshint',\n    'karma:continuous',\n    'compress'\n  ]);\n};\n"}